
<!-- This script inserts Challenges data into the Challenges table.-->
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Ghost Text 101', N'<div class="container-xl px-3 px-md-6 my-4 py-5"> <!-- Summary --> <p style="font-weight: 600;">Summary</p> <p> In this micro-exercise you will practise <b>Copilot’s “ghost text” inline completion</b> on real code in your own repository. You will (a) finish a half-implemented function in your primary language, then (b) repeat the experiment in a different language file that already lives in the same repo, all in <u>15-20 minutes</u>. </p> <!-- What you will learn --> <p style="font-weight: 600;">What you will learn</p> <ul> <li> <p>Triggering and accepting Copilot’s inline suggestions (“ghost text”).</p> </li> <li> <p>Prompting better suggestions with meaningful names and comments.</p> </li> <li> <p>Cycling through alternative completions with the keyboard.</p> </li> <li> <p>Comparing Copilot behaviour across two different programming languages.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight: 600;">Before you start</p> <p> Make sure GitHub Copilot is enabled in <i>your IDE of choice</i> (VS Code, JetBrains, Visual Studio, Neovim&hellip;). Open a repository you worked on recently, no starter project needed. </p> <!-- Step-by-step tutorial --> <p style="font-weight: 600;">Steps</p> <ul> <li> <p><b>1.&nbsp;Pick a partially written function</b><br> Locate a function or method you began last week but never finished. <i>Tip:</i> search for “TODO” comments or empty method bodies. If you don’t have one, create a new function and leave it partly stubbed to simulate a work-in-progress.</p> </li> <li> <p><b>2.&nbsp;Set the stage for Copilot</b><br> Add a one-line comment describing the intent (e.g., <code>// Return the sum of all positive numbers</code>). Good context helps Copilot suggest higher-quality code.</p> </li> <li> <p><b>3.&nbsp;Start typing... accept the ghost text</b><br> Begin the first line of the implementation and pause. When the grey suggestion appears:</p> <ul> <li> <p>Press <kbd>Tab</kbd> (<kbd>? ]</kbd> / <kbd>Alt ]</kbd> to cycle variants) to accept.</p> </li> <li> <p>Optionally reject (<kbd>Esc</kbd>) and keep typing to refine the prompt.</p> </li> </ul> </li> <li> <p><b>4.&nbsp;Review &amp; adjust</b><br> Read the generated code. If it compiles and meets your style, keep it; otherwise edit freely.</p> </li> <li> <p><b>5.&nbsp;Try again in another language file</b><br> Open a file in a <i>different language</i> that already exists in the repo (e.g., Python if you started in JS). Repeat steps&nbsp;2-4 and observe how suggestions adapt.</p> </li> <li> <p><b>6.&nbsp;Commit your work</b><br> Run tests or build as usual, then commit with a Copilot-generated commit message (optional).</p> </li> </ul> <!-- Mini-quiz --> <p style="font-weight: 600;">Checkpoint –&nbsp;Did you really do it?</p> <div class="mb-4"> <!-- Changed from mb-3 to mb-4 for more spacing --> <p>1.&nbsp;Did Copilot suggest a complete, runnable function body?</p> <div class="mb-2"> <!-- Added mb-2 for spacing between radio options --> <input type="radio" name="q1"> Yes <input type="radio" name="q1"> No </div> </div> <div class="mb-4"> <!-- Changed from mb-3 to mb-4 --> <p>2.&nbsp;Did you use the keyboard shortcut to <i>cycle</i> through alternative suggestions?</p> <div class="mb-2"> <!-- Added mb-2 --> <input type="radio" name="q2"> Yes <input type="radio" name="q2"> No </div> </div> <div class="mb-5"> <!-- Changed from mb-4 to mb-5 for more spacing before next section --> <p>3.&nbsp;Did you repeat the exercise in a second language file and notice any differences?</p> <div class="mb-2"> <!-- Added mb-2 --> <input type="radio" name="q3"> Yes <input type="radio" name="q3"> No </div> </div> <!-- Explore more --> <p style="font-weight: 600;">Want to explore more?</p> <ul> <li> <p><a href="https://docs.github.com/en/copilot/getting-started-with-github-copilot" target="_blank">Copilot Quickstart docs</a></p> </li> <li> <p><a href="https://code.visualstudio.com/docs/editor/intellisense#_inline-suggestions" target="_blank">VS Code inline suggestion keys</a></p> </li> <li> <p><a href="https://githubnext.com/projects/copilot-cli" target="_blank">Copilot CLI (ghost text on the command line)</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Say hi to Copilot Chat', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this exercise you will use <strong>GitHub Copilot Chat</strong> to understand and improve code that already exists in your repository. You will select a confusing block, ask Copilot Chat to explain it, then request a simpler rewrite. The entire task should take about twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Opening Copilot Chat inside your IDE.</p> </li> <li> <p>Sending prompts that refer to selected code.</p> </li> <li> <p>Asking follow up questions to refine Copilot responses.</p> </li> <li> <p>Evaluating and applying a suggested rewrite to your own code.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Confirm that Copilot Chat is enabled in <strong>your IDE</strong> (use the Copilot sidebar in VS&nbsp;Code or the Copilot Chat tool window in JetBrains and Visual&nbsp;Studio). Work inside a repository you own or have permission to change. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Select a block of code that you find hard to read or overly complex.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> With the code still highlighted open the Copilot Chat panel. In VS&nbsp;Code choose <strong>Copilot&nbsp;Chat</strong> from the Activity Bar. In JetBrains use <strong>View &gt; Tool&nbsp;Windows &gt; Copilot&nbsp;Chat</strong>.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Type <code>Explain what this does</code> and press Enter. Read Copilot’s explanation and make sure it matches your intention.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> In the same conversation type <code>Can you suggest a simpler rewrite</code>. Copilot will return a refactored version of the selected code.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Compare the suggested code with the original. If you prefer the new version paste it over the old block then run your tests or build command.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Commit the change with a clear message. You can pause at the commit prompt and let Copilot propose a message if you wish.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot Chat provide an explanation that aligned with your understanding of the code</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you ask for and receive a simpler rewrite</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did the rewritten code compile or pass tests after you applied it</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/getting-started-chat" target="_blank">Getting started with Copilot Chat</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/visualstudio/ide/visual-studio-github-copilot-chat?view=vs-2022" target="_blank">Using Copilot Chat in VS&nbsp;Code</a></p> </li> <li> <p><a href="https://plugins.jetbrains.com/plugin/17718-github-copilot" target="_blank">Copilot Chat for JetBrains IDEs</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Docstring on demand', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> This exercise shows how to let <strong>GitHub Copilot</strong> write documentation for your own code. You will insert a docstring marker above an undocumented function or class and accept the generated text. The task should take about fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Triggering docstring generation with <code>/**</code> in languages such as JavaScript Java and C#.</p> </li> <li> <p>Triggering docstring generation with <code>"""</code> in Python.</p> </li> <li> <p>Accepting or cycling through Copilot suggestions to document code quickly.</p> </li> <li> <p>Reviewing and editing generated documentation for clarity and accuracy.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Make sure GitHub Copilot is active in <strong>your IDE</strong> (VS&nbsp;Code JetBrains Visual&nbsp;Studio or Neovim). Open a repository you own or maintain so you can save changes. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Find a function or class in your code that has no documentation.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Place the cursor on the line directly above that definition.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Type <code>/**</code> if you are in JavaScript Java or C# or type <code>"""</code> if you are in Python then press Enter.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Wait for Copilot to suggest a complete docstring. Press <strong>Tab</strong> to accept or use <strong>Alt&nbsp;]</strong> or <strong>Option&nbsp;]</strong> to view other versions.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Read the generated text. Add or correct details so that parameters return values and side effects are clear.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Repeat Steps&nbsp;1 to&nbsp;5 on one more function in another language file if possible.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Commit your changes with a message that mentions added documentation. You may let Copilot draft the commit message at the prompt.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot generate a docstring without manual typing</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you cycle through more than one suggestion before accepting</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you edit the generated docstring to better fit your code style</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://docs.github.com/en/copilot/getting-started-with-github-copilot" target="_blank">Getting started with GitHub Copilot</a></p> </li> <li> <p><a href="https://docs.github.com/en/copilot/quickstart" target="_blank">Quickstart guide for common Copilot tasks</a></p> </li> <li> <p><a href="https://github.blog/ai-and-ml/github-copilot/documenting-and-explaining-legacy-code-with-github-copilot-tips-and-examples/" target="_blank">Using Copilot in VS&nbsp;Code</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'CLI : Explain a scary command ', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this exercise you will use <strong>GitHub Copilot CLI</strong> to understand a complex shell command from your own project. You will ask Copilot to explain the command <code>git diff --name-only | head -n 1</code> through the <code>gh copilot explain</code> feature. Plan for about ten to fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Installing and using the <code>gh copilot</code> extension.</p> </li> <li> <p>Running <code>gh copilot explain</code> on a shell command in your terminal.</p> </li> <li> <p>Reading Copilot output to confirm understanding of each command part.</p> </li> <li> <p>Applying the same method to any unfamiliar command in future.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Confirm that the GitHub CLI is installed by running <code>gh --version</code>. Install the Copilot extension with <code>gh extension install github/gh-copilot</code> if it is not yet present. Authenticate with <code>gh auth login</code> and stay in the root folder of a repository you can modify. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open a terminal in the root folder of your project.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Copy and paste the command below then press Enter.</p> <p><code>gh copilot explain "$(git diff --name-only | head -n 1)"</code></p> </li> <li> <p><strong>Step&nbsp;3.</strong> Wait for Copilot to produce a line by line explanation of the pipeline.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Compare each part of the explanation with your own understanding. If something is not clear ask a follow up question such as <code>gh copilot explain "head -n 1"</code>.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Run the original command without the Copilot prefix and view the output so you can link explanation to real data.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Use <code>gh copilot explain</code> on a different command from your shell history to reinforce the technique.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot return an explanation that listed every flag and sub command</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you confirm the explanation by running the original command yourself</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you try <code>gh copilot explain</code> on at least one more command from your project</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://githubnext.com/projects/copilot-cli" target="_blank">GitHub Copilot CLI project page</a> </p> </li> <li> <p><a href="https://docs.github.com/en/copilot/using-github-copilot/using-github-copilot-in-the-command-line" target="_blank">gh copilot command reference</a></p> </li> <li> <p><a href="https://docs.github.com/en/copilot/getting-started-with-github-copilot" target="_blank">Getting started with GitHub Copilot</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Slash command speed run', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> This exercise shows how to use the <strong>/tests</strong> slash command in GitHub Copilot Chat to generate unit tests for code you just changed. You will invoke the command, accept the resulting test file, then run your usual test runner to confirm everything passes. Expect to finish in fifteen to twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Opening Copilot Chat and issuing a slash command.</p> </li> <li> <p>Letting Copilot generate language specific unit tests.</p> </li> <li> <p>Saving the generated file into your repository.</p> </li> <li> <p>Running your existing test framework to validate results.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Ensure GitHub Copilot Chat is enabled in <strong>your IDE</strong> (VS&nbsp;Code JetBrains Visual&nbsp;Studio or Neovim). Confirm your project has a working test runner such as Jest PyTest JUnit or xUnit. Open a file you modified in the last commit. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Place the cursor inside the file you recently edited. No need to select text.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Open Copilot Chat. In VS&nbsp;Code click the Copilot icon in the Activity Bar. In JetBrains choose <strong>View &gt; Tool&nbsp;Windows &gt; Copilot&nbsp;Chat</strong>.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> In the chat box type <code>/tests</code> and press Enter. Copilot will respond with a proposed test file tailored to the file under the cursor.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Review the generated code. Use <strong>Tab</strong> to accept or <strong>Esc</strong> to reject and retry. If accepted Copilot inserts the new test file in the correct folder.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Run your normal test command such as <code>npm test</code> <code>pytest</code> or <code>dotnet test</code>. Confirm that all tests pass.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Commit the new test file with a clear message. You can let Copilot draft the commit message if you pause at the prompt.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot create a test file without manual coding</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the generated tests run successfully in your test framework</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you review and adjust any part of the generated tests before committing</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://learn.microsoft.com/en-us/visualstudio/ide/copilot-chat-context" target="_blank">Copilot Chat slash commands reference</a></p> </li> <li> <p><a href="https://docs.github.com/en/copilot/using-github-copilot/copilot-chat/asking-github-copilot-questions-in-your-ide" target="_blank">Using Copilot Chat overview</a> </p> </li> <li> <p><a href="https://docs.github.com/en/copilot/using-github-copilot/guides-on-using-github-copilot/writing-tests-with-github-copilot" target="_blank">Generating tests with Copilot tutorial</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Snippet translation', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> This exercise demonstrates how to use <strong>GitHub Copilot Chat</strong> to convert code from one language to another. You will copy a snippet from your repository for example Java ask Copilot Chat to translate it into Go idioms then place the result in a scrapbook branch for review. Plan about twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Sending context aware prompts to Copilot Chat.</p> </li> <li> <p>Generating idiomatic code in a target language.</p> </li> <li> <p>Reviewing translated code for correctness and style.</p> </li> <li> <p>Isolating experiments in a scrapbook or draft branch.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Confirm Copilot Chat is active in <strong>your IDE</strong> such as VS&nbsp;Code JetBrains Visual&nbsp;Studio or Neovim. Ensure you have permissions to create a new branch in the repository you are using. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open a file that contains a non trivial snippet you want to translate for example a Java method.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Highlight the entire snippet including any import statements that matter. </p> </li> <li> <p><strong>Step&nbsp;3.</strong> Open Copilot Chat and type <code>Translate to Go idioms</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Review the generated Go code. Use <strong>Tab</strong> to accept or <strong>Esc</strong> to ask follow up questions such as performance considerations.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Create a scrapbook branch with <code>git checkout -b translate-experiment</code> or use your IDE branch controls.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Add a new file for example <code>snippet.go</code> and paste the translated code. Run <code>go vet</code> or another linter to verify compilation.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Commit the file with a descriptive message such as Add Go translation of example snippet.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot produce syntactically correct code in the target language</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the translated snippet compile or pass linting tools</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you create and commit the translation in a separate scrapbook branch</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://docs.github.com/en/copilot/copilot-chat-cookbook/refactoring-code/translating-code-to-a-different-programming-language" target="_blank">Translating code across languages with Copilot</a></p> </li> <li> <p><a href="https://code.visualstudio.com/docs/copilot/overview" target="_blank">Copilot in VS&nbsp;Code documentation</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Keyboard only hero', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this keyboard only challenge you will add a small new function to your project using GitHub Copilot completions without touching the mouse. You will use shortcut keys to cycle through suggestions accept code and record how long the task takes. Plan about fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Starting Copilot inline completions with the keyboard.</p> </li> <li> <p>Moving through alternative suggestions using <code>Alt ]</code> or <code>Option ]</code>.</p> </li> <li> <p>Accepting code with <code>Tab</code> and dismissing with <code>Esc</code>.</p> </li> <li> <p>Measuring productivity gains when you avoid the mouse.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Ensure GitHub Copilot is active in <strong>your IDE</strong> (VS&nbsp;Code JetBrains Visual&nbsp;Studio or Neovim). Check that the inline completion shortcuts match your keymap. Have a stopwatch or phone timer ready. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Decide on a simple new function for example <code>calculateAverage</code> that you can add to an existing file.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Start your timer then move the cursor to the location where the new function should go.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Type the function signature and pause. When Copilot shows a suggestion press <strong>Tab</strong> to accept or use <strong>Alt ]</strong> or <strong>Option ]</strong> to view other completions.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Continue using only the keyboard to build out the body of the function. Use <strong>Esc</strong> to reject any unwanted lines and type more context as needed.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Stop the timer when the function completes after edits. Note the time and write it down. </p> </li> <li> <p><strong>Step&nbsp;6.</strong> Run your normal tests or build command to confirm the new function works. </p> </li> <li> <p><strong>Step&nbsp;7.</strong> Commit the change. You may let Copilot suggest the commit message by pausing at the prompt.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did you complete the task without using the mouse</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you cycle through at least one alternative suggestion with the shortcut keys</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you record the time taken and compare it to a mouse based workflow</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://code.visualstudio.com/docs/reference/default-keybindings" target="_blank">Copilot keyboard shortcuts overview</a></p> </li> <li> <p><a href="https://code.visualstudio.com/docs/editor/intellisense" target="_blank">Inline suggestions in VS&nbsp;Code</a></p> </li> <li> <p><a href="https://code.visualstudio.com/docs/setup/mac" target="_blank">Visual Studio Code on macOS </a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Vision preview quick win', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this quick win you will use <strong>GitHub Copilot Chat Vision Preview</strong> to turn an existing architecture diagram into C#/Java/JS code stubs. You will drag a PNG or SVG diagram from your repository into the chat panel ask Copilot to stub each service or class then save the generated files. The whole task should take fifteen to twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Adding image context to Copilot Chat Vision Preview.</p> </li> <li> <p>Prompting Copilot to create class and interface stubs from a diagram.</p> </li> <li> <p>Saving generated files in the correct folder of your repo.</p> </li> <li> <p>Using a scratch branch to keep experiments separate from main.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Copilot Chat Vision Preview currently works in <strong>VS&nbsp;Code</strong> only. Verify you have the latest VS&nbsp;Code and Copilot extension then enable the Vision feature in the extension settings. Make sure the diagram you want to use is already stored in your repository for example <code>docs/system-diagram.png</code>. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open the diagram file in the VS&nbsp;Code Explorer so you can see it in the file list.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Create and check out a new branch named <code>vision-stubs</code> by using <code>git checkout -b vision-stubs</code> or the source control view.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Open Copilot Chat. In VS&nbsp;Code select the Copilot icon in the Activity Bar.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Drag the PNG or SVG diagram from the Explorer into the chat input box. Wait until the thumbnail appears confirming the image is attached.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Type <code>Stub these services/classes </code>in a language of your choice and press Enter. Copilot will list the detected elements and generate code stubs for each one.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Review the output. Use <strong>Tab</strong> to accept snippets or copy each stub into new files under <code>/src/</code>.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Compile the code or your usual build task to ensure the new files compile.</p> </li> <li> <p><strong>Step&nbsp;8.</strong> Commit the stubs to the <code>vision-stubs</code> branch with a descriptive message created by you or drafted by Copilot.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot identify every main component in your diagram</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did all generated stubs compile without errors</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you commit the stubs in a separate branch for later review</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://code.visualstudio.com/updates/v1_98#_copilot-vision-preview" target="_blank">Copilot Vision Preview</a> </p> </li> <li> <p><a href="https://github.blog/changelog/2024-03-21-github-copilot-general-availability-in-the-cli/" target="_blank">GitHub Copilot General Availability in the CLI</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Commit message concierge', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> This exercise shows how to let <strong>GitHub Copilot</strong> write commit messages for you. You will stage today’s changes invoke Copilot’s commit message helper accept the draft then amend it with extra context if required. The task should take ten to fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Staging file changes with <code>git add</code> or your IDE source control panel.</p> </li> <li> <p>Triggering Copilot to draft a commit message from the staged diff.</p> </li> <li> <p>Editing the AI generated message to add project specific context.</p> </li> <li> <p>Committing and pushing the change to your remote repository.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Confirm that GitHub Copilot is enabled in <strong>your IDE</strong> for example VS&nbsp;Code JetBrains or Visual&nbsp;Studio. Make sure you have several modified files ready to commit in your repository. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Stage all changes by running <code>git add -A</code> in the terminal or selecting files in the IDE source control view.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Start the commit process.</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>In VS&nbsp;Code place the cursor in the commit message box.</p> </li> <li> <p>In JetBrains open the Commit tool window.</p> </li> </ul> </li> <li> <p><strong>Step&nbsp;3.</strong> Wait a moment. Copilot detects the staged diff and inserts a suggested message.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Read the draft. Use the keyboard to append extra context such as ticket numbers or motivations.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Save the commit.</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>In the terminal type <code>git commit</code> then accept the message.</p> </li> <li> <p>In the IDE click Commit or press the shortcut.</p> </li> </ul> </li> <li> <p><strong>Step&nbsp;6.</strong> Push the commit to your remote with <code>git push</code> or the IDE push command.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot generate a commit message automatically from your staged changes</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you add additional detail such as a ticket reference or rationale</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did the commit push successfully to the remote repository</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://docs.github.com/en/copilot/getting-started-with-github-copilot#generate-commit-messages" target="_blank">Generating commit messages with Copilot</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Explain my PR', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> This activity shows how to use <strong>GitHub Copilot Explain</strong> to create a human readable summary of a pull request. You will open a real PR you just raised click the Explain button on the Files&nbsp;changed tab then post the generated text as a PR comment. The task should take about fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Locating the Copilot Explain option on the Files&nbsp;changed tab of a pull request.</p> </li> <li> <p>Generating a natural language summary of code changes.</p> </li> <li> <p>Posting Copilot output as a comment to help reviewers.</p> </li> <li> <p>Adding context or edits to improve the summary before submission.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Ensure you have a GitHub repository in <strong>Github Enterprise</strong> where you can open pull requests. Push at least one commit and create a new PR that modifies multiple lines so the diff is non trivial. Make sure Copilot Explain for pull requests is enabled under repository Settings &gt; Copilot. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Navigate to your pull request on GitHub and click the <strong>Files&nbsp;changed</strong> tab.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Locate the <strong>Copilot Explain</strong> button near the top of the diff view and click it.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Wait for Copilot to produce a summary. Review the text and copy it to your clipboard.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Scroll to the PR conversation tab click <strong>Comment</strong> and paste the summary.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Add any missing context such as ticket numbers or performance notes then submit the comment.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Notify your reviewers that an AI generated summary is available to speed up review.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot Explain generate a clear summary without errors</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you post the summary as a comment in the pull request conversation</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you enhance the summary with extra context before submitting</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://docs.github.com/en/copilot/responsible-use-of-github-copilot-features/responsible-use-of-github-copilot-pull-request-summaries" target="_blank">Copilot for pull requests</a></p> </li> <li> <p><a href="https://docs.github.com/en/github/collaborating-with-pull-requests" target="_blank">Collaborating with pull requests</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Refactor with confidence', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this activity you will use <strong>GitHub Copilot Chat</strong> to refactor a long method by extracting smaller helper methods while keeping behaviour unchanged. Copilot will also create unit tests first so you can confirm nothing breaks. The exercise should take about twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Selecting a candidate for refactor in your own code.</p> </li> <li> <p>Prompting Copilot Chat to extract helper methods and generate tests up front.</p> </li> <li> <p>Running the new tests to verify behaviour before and after refactor.</p> </li> <li> <p>Committing refactor changes with confidence.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Ensure Copilot Chat is enabled in <strong>your IDE</strong> such as VS&nbsp;Code JetBrains or Visual&nbsp;Studio. Confirm your project has a working test runner like Jest PyTest JUnit or xUnit. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Locate a method longer than about thirty lines that mixes multiple responsibilities.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Highlight the entire method then open Copilot Chat.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Type <code>Extract smaller methods write tests first keep behaviour</code> and press Enter.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Copilot will propose unit tests followed by the refactor plan and code. Accept the tests first, save them in your test folder (if not create one) and then copy the refactored code.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Run your test suite for example <code>npm test</code> <code>pytest</code> or <code>dotnet test</code>. All tests should pass confirming behaviour is intact.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Review helper method names and visibility. Rename or adjust signatures if needed then rerun tests.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Commit the changes with a descriptive message. You may let Copilot draft the commit message once your staged diff is ready.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot create unit tests before performing the refactor</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did all tests pass after the new helper methods were added</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you confirm that the refactored code reads more clearly than before</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://docs.github.com/en/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot" target="_blank">Refactoring code with GitHub Copilot </a></p> </li> <li> <p><a href="https://github.blog/ai-and-ml/github-copilot/how-to-refactor-code-with-github-copilot/" target="_blank">How to refactor code with GitHub Copilot</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Slash @terminal debugging', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this debugging exercise you will intentionally break a script in your repository then use <strong>@terminal</strong> in GitHub Copilot Chat to diagnose and fix the failure. Expect to spend fifteen to twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Capturing the last terminal command context with <code>@terminal</code>.</p> </li> <li> <p>Requesting an explanation of an error from Copilot.</p> </li> <li> <p>Accepting and applying an AI suggested fix.</p> </li> <li> <p>Verifying the script works after the fix.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Confirm Copilot Chat is enabled in <strong>your IDE</strong> such as VS&nbsp;Code JetBrains or Visual&nbsp;Studio. Open a repository that contains a script you can safely modify for example a Bash or Python utility. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open a script or a code file and introduce a simple error such as a misspelled variable name or missing import.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Save the file then run the script or build the code in the integrated terminal.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> The script should fail and show an error message. Do not fix it manually. </p> </li> <li> <p><strong>Step&nbsp;4.</strong> Open Copilot Chat and type <code>@terminal why did the last command fail</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Read Copilot''s explanation and review the suggested fix (if any). If acceptable copy or accept the code into your script or code.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Rerun the script or code with the same command. Confirm it now completes successfully.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Commit the corrected script with a clear message drafted by you or suggested by Copilot.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot correctly explain the reason for the failure</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you apply the Copilot suggested fix without manual changes</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did the script run successfully after the fix</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://docs.github.com/en/copilot/responsible-use-of-github-copilot-features/responsible-use-of-github-copilot-in-windows-terminal" target="_blank">Terminal use overview</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Language model pair review', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> This activity shows how to include <strong>GitHub Copilot</strong> as an automated reviewer on a pull request. You will assign Copilot to your PR respond to at least one AI generated comment then merge the pull request. The exercise takes about fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Adding Copilot as a reviewer on a pull request.</p> </li> <li> <p>Reading and interpreting AI review comments.</p> </li> <li> <p>Responding to or applying suggested changes.</p> </li> <li> <p>Merging the pull request after AI and human approval.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Ensure you have <strong> Copilot Enterprise </strong> and Copilot code review is enabled in your repository settings. If unsure, check with your GitHub admin. Have a pull request ready that contains meaningful changes but is not yet merged. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open your pull request on GitHub and click <strong>Reviewers</strong>.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Search for and select <strong>GitHub Copilot</strong> then wait while the AI review runs.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Refresh the page when Copilot comments appear. Read each comment carefully. </p> </li> <li> <p><strong>Step&nbsp;4.</strong> Choose at least one AI suggestion to address. Reply with a note or push a follow up commit that resolves the feedback.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Mark the conversation as resolved when you are satisfied.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Once all reviewers including Copilot have approved click <strong>Merge pull request</strong>.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot provide review comments on your pull request</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you respond to or act on at least one AI comment</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you merge the pull request after all approvals</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://docs.github.com/en/copilot/using-github-copilot/code-review/using-copilot-code-review" target="_blank">Copilot code review overview</a></p> </li> <li> <p><a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests" target="_blank">Collaborating on pull requests</a></p> </li> <li> <p><a href="https://docs.github.com/en/copilot/getting-started-with-github-copilot" target="_blank">Getting started with Copilot</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'CLI suggest & execute', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this exercise you will use <strong>GitHub Copilot CLI</strong> to suggest and run a command that cleans up local branches already merged into main. You will execute the suggestion then verify the result with <code>git branch</code>. The task should take about ten minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Running <code>gh copilot suggest</code> to generate shell commands.</p> </li> <li> <p>Executing the generated command directly from the CLI prompt.</p> </li> <li> <p>Verifying local branch cleanup with <code>git branch</code>.</p> </li> <li> <p>Using Copilot CLI for other repository maintenance tasks.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Confirm that GitHub CLI is installed with <code>gh --version</code>. Install the Copilot extension if needed using <code>gh extension install github/gh-copilot</code>. Authenticate with <code>gh auth login</code> and open a terminal in the root of a repository that has multiple merged branches. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> In the project root run the following command and press Enter.</p> <p><code>gh copilot suggest "clean local merged branches"</code></p> </li> <li> <p><strong>Step&nbsp;2.</strong> Review the suggestion displayed by Copilot CLI. It should resemble <code>git branch --merged | grep -v "main" | xargs -n 1 git branch -d</code>.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> When prompted choose the option to execute the command. If your terminal does not prompt automatically run the suggested command manually.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> After execution run <code>git branch</code> to list local branches and confirm that only active branches remain.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Explore other cleanup ideas by running <code>gh copilot suggest "list large files in repo"</code> or a command of your choice.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Commit any auxiliary changes if applicable and push to remote.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot suggest a safe branch cleanup command</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the command remove local branches that are already merged</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you confirm the result with <code>git branch</code></p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://githubnext.com/projects/copilot-cli" target="_blank">GitHub Copilot CLI project page</a> </p> </li> <li> <p><a href="https://docs.github.com/en/copilot/using-github-copilot/copilot-chat/github-copilot-chat-cheat-sheet" target="_blank">Copilot command reference</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'README booster', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this activity you will use <strong>GitHub Copilot Chat</strong> to add a new Setup or Contributing section to your project Readme. Copilot will draft the content you will review and edit then commit the updated file. Plan about fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Prompting Copilot Chat to generate markdown content.</p> </li> <li> <p>Editing AI generated text to match project style.</p> </li> <li> <p>Committing documentation changes to the repository.</p> </li> <li> <p>Previewing markdown to verify formatting.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Confirm Copilot Chat is active in <strong>your IDE</strong> such as VS&nbsp;Code JetBrains or Visual&nbsp;Studio. Ensure your repository has a Readme in the root folder. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open <code>README.md</code> at the top of your project and place the cursor where the new section should go.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Open Copilot Chat and type <code>Draft a Setup section for this #codebase</code> or <code>Draft a Contributing section for this #codebase</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Review the markdown Copilot returns. Use <strong>Tab</strong> to accept or copy and paste only the parts you need.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Edit headings code blocks and command references to fit your tooling and style.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Preview the markdown in your IDE to confirm links and formatting look correct.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Stage the updated Readme with <code>git add README.md</code> or via the source control view.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Commit the change letting Copilot suggest the commit message if you wish then push to remote.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot generate a complete markdown section without manual writing</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you edit the draft to align with project conventions</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did the updated Readme render correctly in preview or on GitHub</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://githubnext.com/projects/copilot-view/" target="_blank">Copilot codebase overview</a></p> </li> <li> <p><a href="https://docs.github.com/en/copilot/getting-started-with-github-copilot#documentation" target="_blank">Generating documentation with Copilot</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Security lens starter', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this security focused exercise you will copy a data access function from your repository that may contain a vulnerability. You will ask <strong>GitHub Copilot Chat</strong> to identify potential OWASP risks and provide a safer version of the code. Finally you will write a quick unit test to confirm the fix works. Allocate about twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Sending real code snippets to Copilot Chat for security analysis.</p> </li> <li> <p>Mapping identified issues to OWASP categories.</p> </li> <li> <p>Generating a safer refactor that mitigates the risk.</p> </li> <li> <p>Writing a simple unit test to validate the secure behaviour.</p> </li> </ul> <!-- Prerequisites --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Ensure Copilot Chat is enabled in <strong>your IDE</strong> for example VS&nbsp;Code JetBrains or Visual&nbsp;Studio. Confirm your project has a working test runner such as Jest PyTest JUnit or xUnit. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> In your code, select a data access function that may be vulnerable for example one that concatenates user input into a SQL string.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Open Copilot Chat, note how the selected line numbers are automatically included and type <code>Identify OWASP risks and provide a safer version</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Review the risks Copilot lists such as SQL Injection or Insecure Deserialization. Examine the safer code suggestion.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Accept the secure refactor or copy it into a new branch for example <code>security-fix</code>.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Ask Copilot Chat <code>Write a unit test that proves the fix blocks the vulnerability</code> then save the test file in your test directory.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Run your tests with <code>npm test</code> <code>pytest</code> or <code>dotnet test</code>. Confirm they pass.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Commit the secure code and tests with a descriptive message drafted by you or suggested by Copilot.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot correctly highlight at least one OWASP risk in your original code</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you implement the safer version without breaking existing functionality</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did the new unit test pass confirming the vulnerability is mitigated</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://docs.github.com/en/copilot/copilot-chat-cookbook/security-analysis/finding-existing-vulnerabilities-in-code" target="_blank">Finding existing vulnerabilities in code</a></p> </li> <li> <p><a href="https://owasp.org/www-project-top-ten" target="_blank">OWASP Top Ten reference</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Workspace autopilot', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this activity you will use <strong>GitHub Copilot Workspace in GitHub Enterprise</strong> to fix a real issue in your repository. Copilot Workspace will create a plan generate a new branch apply the changes and open a pull request for review. Expect to spend twenty to twenty five minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Enabling Copilot Workspace on a GitHub Issue.</p> </li> <li> <p>Reviewing an AI generated implementation plan.</p> </li> <li> <p>Letting Copilot create code commits and a pull request automatically.</p> </li> <li> <p>Verifying the pull request fixes the bug before merging.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Copilot Workspace is currently available in <strong>VS Code</strong> with the Copilot Nightly extension. Confirm you have the Nightly build installed and signed in to GitHub. Ensure there is a GitHub Issue in your repository that describes a reproducible bug. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open the Issue you want to fix in your browser and click <strong>Open in Copilot Workspace</strong>.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> VS Code launches a workspace panel showing the Issue description. Click <strong>Generate plan</strong> and wait for Copilot to list tasks.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Review the task list. If it looks correct click <strong>Run</strong> to let Copilot apply the changes on a new branch named <code>workspace_fix</code>.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Watch Copilot create commits. When finished it opens a pull request in the repository.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Open the pull request in your browser. Review the diff run tests locally or via continuous integration and confirm the bug is resolved.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Merge the pull request using the standard Merge button.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Close the original Issue if it did not close automatically.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot Workspace generate a clear task plan for the Issue</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the automated branch and pull request compile and pass tests</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you merge the pull request and close the Issue</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://githubnext.com/projects/copilot-workspace" target="_blank">Copilot Workspace project overview</a></p> </li> <li> <p><a href="https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues" target="_blank">Working with GitHub Issues</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Cross file rename', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this refactor exercise you will use <strong>GitHub Copilot Chat</strong> to rename every occurrence of the class <code>User</code> to <code>Member</code> across your repository. Copilot will propose bulk edits update imports and you will finish by running your build or test suite. Allocate around twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Prompting Copilot Chat for a project wide rename.</p> </li> <li> <p>Reviewing bulk edit suggestions before applying them.</p> </li> <li> <p>Running build or test commands to verify a large refactor.</p> </li> <li> <p>Committing refactor changes with confidence.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Ensure Copilot Chat is enabled in <strong>your IDE</strong> for example VS&nbsp;Code JetBrains or Visual&nbsp;Studio. If you are using a compatible editor you may switch to EDIT mode. See references section below for instructions. Confirm your project builds cleanly and that you have a working test runner such as Jest PyTest JUnit or xUnit. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open any file that defines or references the class <code>User</code>.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Launch Copilot Chat and type <code>Rename class User to Member across the repo update imports</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Copilot displays a list of bulk edits. Review each change to confirm file paths and renamed symbols are correct.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Approve the bulk edits. Copilot will commit the changes to your working tree.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Run your normal build or test command such as <code>npm test</code> <code>pytest</code> or <code>dotnet build</code>. Ensure everything compiles and all tests pass.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> If errors occur ask Copilot Chat follow up questions for example <code>Fix remaining User references</code> then re run the build.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Commit the refactor with a message like <code>refactor: rename User to Member across codebase</code>. You may allow Copilot to draft the commit message at the prompt.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot list every file requiring a rename</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the project build or all tests pass after the rename</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you commit the refactor with a descriptive message</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://learn.microsoft.com/en-us/visualstudio/ide/copilot-edits" target="_blank">Copilot Edits VS 2022 overview</a></p> </li> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/copilot-edits" target="_blank">Copilot Edits VS Code overview</a></p> </li> <li> <p><a href="https://github.blog/changelog/2025-03-20-enhance-your-productivity-with-copilot-edits-in-jetbrains-ides/" target="_blank">Copilot Edits Jetbrains overview</a></p> </li> <li> <p><a href="https://docs.github.com/en/repositories/working-with-files/managing-files" target="_blank">Managing files in a repository</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Vision driven UX prototype', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this rapid prototyping exercise, you will upload a photo of a hand-drawn or externally sourced wireframe into GitHub Copilot Chat Vision Preview and request Copilot to generate responsive HTML and CSS. Reserve twenty minutes for the full flow. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Adding image context to Copilot Chat Vision Preview.</p> </li> <li> <p>Prompting Copilot to scaffold HTML and CSS from a wireframe.</p> </li> <li> <p>Saving generated files in a prototype folder.</p> </li> <li> <p>Launching a local preview to test responsiveness.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Copilot Chat Vision Preview is available in <strong>VS Code Nightly</strong> with the Copilot extension enabled. Place a photo or scan of your wireframe in the repository for example <code>docs/wireframe.jpg</code>. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Create a new branch called <code>vision-prototype</code> with <code>git checkout -b vision-prototype</code> or the source control panel.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Open Copilot Chat in VS&nbsp;Code in EDIT mode and drag the wireframe image into the chat box. Wait until the thumbnail appears. Example:</p> <p> <img src="/images/handdrawn.png" alt="Copilot Wireframe example" style="width:100%;max-width:600px;margin-top:10px;margin-bottom:10px;" /> </p> </li> <li> <p><strong>Step&nbsp;3.</strong> Type <code>Scaffold responsive HTML and CSS for this layout place files in prototype folder</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Copilot returns one or more files. Accept each file with <strong>Tab</strong> so they appear under <code>prototype/</code>.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Open <code>prototype/index.html</code> in the Live&nbsp;Preview extension or a local browser. Resize the window to confirm the layout adapts to mobile and desktop widths.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Adjust colours fonts or breakpoints if needed then save the files.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Commit the prototype with a clear message and push the branch for review. </p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot generate HTML and CSS files in the <code>prototype/</code> folder</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Does the prototype render correctly on both mobile width and desktop width</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you commit the files on the <code>vision-prototype</code> branch</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://github.com/microsoft/vscode-copilot-vision" target="_blank">Vscode copilot vision</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/visualstudio/ide/copilot-edits" target="_blank">Copilot Edits VS 2022 overview</a></p> </li> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/copilot-edits" target="_blank">Copilot Edits VS Code overview</a></p> </li> <li> <p><a href="https://github.blog/changelog/2025-03-20-enhance-your-productivity-with-copilot-edits-in-jetbrains-ides/" target="_blank">Copilot Edits Jetbrains overview</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Copilot-instructions.md power-up', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this personalization exercise you will add a <code>copilot-instructions.md</code> file to your repository root (or use the VS&nbsp;Code Personalize panel) and write three sentences that describe your preferred coding style, frameworks, and docstring format. After saving the file you will ask GitHub Copilot to draft a helper utility and observe how it follows your new instructions. The task should take about fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Creating or editing <code>copilot-instructions.md</code> to guide Copilot output.</p> </li> <li> <p>Using the Personalize panel in VS&nbsp;Code to manage Copilot instructions.</p> </li> <li> <p>Requesting Copilot to generate code that follows custom guidelines.</p> </li> <li> <p>Committing repository level instructions for team visibility.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Ensure GitHub Copilot is enabled in <strong>your IDE</strong> such as VS&nbsp;Code JetBrains or Visual&nbsp;Studio. Have at least one branch where you can commit the new file without affecting production code. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Create and check out a branch named <code>copilot-instructions</code> using <code>git checkout -b copilot-instructions</code> or the source control panel.</p> </li> <li> <p><strong>Step&nbsp;2.</strong>Create a new file <code>.github/copilot-instructions.md</code> in the repository root.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Add exactly three sentences that describe:</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Your preferred indentation and naming style.</p> </li> <li> <p>Your main framework or library choices.</p> </li> <li> <p>Your docstring or comment format.</p> </li> </ul> <p>Example: <code>I use four space indentation and snake_case for functions. All helpers target FastAPI. Docstrings must follow the Google style guide.</code> </p> </li> <li> <p><strong>Step&nbsp;4.</strong> Save the file or panel and close it.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Open any source file and prompt Copilot Chat with <code>Draft a helper utility to validate email addresses</code>. Accept the suggestion.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Confirm that the generated code matches your stated style, framework import, and docstring format.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Stage and commit <code>.github/copilot-instructions.md</code> with a clear message then push the branch and open a pull request.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did you add three clear sentences to <code>copilot-instructions.md</code></p> <input type="radio" name="q1"> Yes&nbsp;&nbsp; <input type="radio" name="q1"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did Copilot generate a helper utility that follows your specified style</p> <input type="radio" name="q2"> Yes&nbsp;&nbsp; <input type="radio" name="q2"> No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you commit the new instruction file to the repository</p> <input type="radio" name="q3"> Yes&nbsp;&nbsp; <input type="radio" name="q3"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://docs.github.com/en/copilot/customizing-copilot/adding-repository-custom-instructions-for-github-copilot" target="_blank">Custom instructions for GitHub Copilot</a></p> </li> <li> <p><a href="https://docs.github.com/en/copilot/getting-started-with-github-copilot" target="_blank">Getting started with Copilot</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Performance profiler assistant', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this performance tuning exercise you will choose a slow running method in your codebase and use <strong>GitHub Copilot Chat in EDIT mode</strong> to instrument it with a profiler in your language of choice. Copilot will then propose optimisations. You will benchmark the method before and after the changes to confirm an improvement. Plan roughly twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Selecting and benchmarking a performance hotspot.</p> </li> <li> <p>Prompting Copilot Chat to add profiler instrumentation.</p> </li> <li> <p>Applying AI suggested optimisations safely.</p> </li> <li> <p>Comparing benchmark results before and after the refactor.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Confirm Copilot Chat is enabled in <strong>your IDE</strong> such as VS&nbsp;Code JetBrains or Visual&nbsp;Studio. Ensure you have a profiling tool available for your language for example <code>timeit</code> in Python BenchmarkDotNet in C&nbsp;Sharp or Node <code>node --prof</code>. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Identify a method that is noticeably slow during normal execution or profiling.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Benchmark the current implementation. For Python run <code>python -m timeit -s "from module import slow_method" "slow_method()"</code> or use your language equivalent. Record the result.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Highlight the entire method then open Copilot Chat and type <code>Instrument this method with the built in profiler and suggest optimisations</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Copilot will insert profiling code and list possible improvements such as memoisation avoiding redundant loops or using more efficient data structures. Accept the instrumentation first run it and observe the hottest lines.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Apply one optimisation at a time following Copilot’s suggestions. Save your changes after each edit.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Benchmark the optimised method using the same command as in Step&nbsp;2. Compare the new runtime with the original.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Once you confirm a measurable improvement commit the changes with a clear message possibly generated by Copilot.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot add profiler instrumentation without syntax errors</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the optimised method run faster than the original benchmark</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you commit the profiler code removal or keep a clean final version</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://learn.microsoft.com/en-us/visualstudio/ide/copilot-edits" target="_blank">Copilot Edits VS 2022 overview</a></p> </li> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/copilot-edits" target="_blank">Copilot Edits VS Code overview</a></p> </li> <li> <p><a href="https://github.blog/changelog/2025-03-20-enhance-your-productivity-with-copilot-edits-in-jetbrains-ides/" target="_blank">Copilot Edits Jetbrains overview</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Internationalisation sweep', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this localisation exercise you will use <strong>GitHub Copilot Chat in EDIT mode</strong> to internationalise a React view. Copilot will wrap hard coded user facing strings in <code>t()</code> calls and create an <code>en.json</code> translation file. You will then verify that the application still renders correctly. Plan about twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Finding hard coded strings in a React component.</p> </li> <li> <p>Prompting Copilot Chat to apply <code>t()</code> wrappers automatically.</p> </li> <li> <p>Generating an <code>en.json</code> translation catalogue.</p> </li> <li> <p>Running and visually verifying the app after internationalisation.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Confirm Copilot Chat is enabled in <strong>your IDE</strong> such as VS&nbsp;Code or JetBrains. Ensure your React project uses a library like <code>react-i18next</code> and runs successfully with <code>npm start</code> or <code>yarn dev</code>. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open a React component that contains visible hard coded strings for example headings button labels or error messages.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Select the whole component or the JSX section with text and open Copilot Chat in EDIT mode.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Type <code>Wrap all user facing strings in t() and generate an en.json file</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Copilot lists edits that replace each literal with <code>{t(''key'')}</code> and proposes an <code>en.json</code> object. Accept the edits and save the translation file under <code>src/locales/en.json</code>.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Run <code>npm start</code> or your usual dev server and load the page in a browser. Check that every string appears and no translation key is missing.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Commit the changes including the updated component and <code>en.json</code> with a descriptive message.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot replace every hard coded string with a <code>t()</code> call</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the generated <code>en.json</code> include keys for each wrapped string</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did the application render correctly after the change</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://react.i18next.com/" target="_blank">react-i18next documentation</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/visualstudio/ide/copilot-edits" target="_blank">Copilot Edits VS 2022 overview</a></p> </li> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/copilot-edits" target="_blank">Copilot Edits VS Code overview</a></p> </li> <li> <p><a href="https://github.blog/changelog/2025-03-20-enhance-your-productivity-with-copilot-edits-in-jetbrains-ides/" target="_blank">Copilot Edits Jetbrains overview</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Copilot for SQL', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this activity you will let <strong>GitHub Copilot</strong> write SQL for you by adding a plain English comment to a data access file. Copilot will turn the comment <code>-- top 10 customers by spend last year</code> into a full query. You will run the query against your database and review the results. Allocate about fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Prompting Copilot with natural language in SQL files.</p> </li> <li> <p>Accepting inline SQL suggestions with the keyboard.</p> </li> <li> <p>Executing generated queries in your database client.</p> </li> <li> <p>Validating query accuracy against sample data.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Confirm Copilot is active in <strong>your IDE</strong> such as VS&nbsp;Code or JetBrains. Ensure you have a database connection configured and working query runner for example psql mysql cli or the built in database panel. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open the file in your data layer where SQL queries are stored for example <code>customerQueries.sql</code> or a repository migration file.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> On a new line type the comment <code>-- top 10 customers by spend last year</code> and press Enter.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Pause. Copilot shows a complete SQL query suggestion. Press <strong>Tab</strong> to accept or use <strong>Alt ]</strong> or <strong>Option ]</strong> to view other versions.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Save the file then copy the generated query or run it directly in your database client connected to the correct schema.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Verify that the query returns ten rows ordered by spend for the previous calendar year. Adjust date filters if required then rerun.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Commit the new query file or update with a descriptive message possibly drafted by Copilot.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot produce a syntactically correct SQL query</p> <input type="radio" name="q1">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q1">&nbsp;No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the query return the expected ten rows sorted by spend</p> <input type="radio" name="q2">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q2">&nbsp;No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you commit the query or save it in the data layer</p> <input type="radio" name="q3">&nbsp;Yes&nbsp;&nbsp; <input type="radio" name="q3">&nbsp;No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Additional Resources</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://dev.to/karenpayneoregon/github-copilot-generate-sql-pd3" target="_blank">Generating SQL with GitHub Copilot</a></p> </li> <li> <p><a href="https://techcommunity.microsoft.com/blog/azuresqlblog/unleashing-sql-sorcery-increasing-performance-and-complexity-with-github-copilot/3898909" target="_blank">Unleashing SQL Sorcery with GitHub Copilot</a></p> </li> <li> <p><a href="https://docs.github.com/en/copilot/using-github-copilot/best-practices-for-using-github-copilot" target="_blank">Best Practices for Using GitHub Copilot</a></p> </li> <li> <p><a href="https://techcommunity.microsoft.com/blog/azuresqlblog/github-copilot-for-sql-developers-turbocharge-your-sql-development-workflow/3875915" target="_blank">Turbocharge Your SQL Development Workflow</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Explain complex diff with Agents', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this exercise you will use <strong>GitHub Copilot Agents</strong> inside VS&nbsp;Code to summarise a set of commits that modified your module (eg:Authentication module). You will ask the Agent <code>Summarise auth module changes across commits a1…a6 in this repo</code> then review the generated overview. Plan about fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Enabling Copilot Agent mode in VS&nbsp;Code.</p> </li> <li> <p>Prompting an Agent to analyse multiple commits.</p> </li> <li> <p>Reading a concise natural language diff summary.</p> </li> <li> <p>Sharing the summary with your team or attaching it to a pull request.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Install the latest <strong>GitHub Copilot </strong> extension in VS&nbsp;Code and enable Agent mode under <strong>Settings &gt; GitHub Copilot &gt; Agents</strong>. Ensure you have at least six sequential commits that touched the module (ex: authentication) and know their hashes (for example <code>a1</code> through <code>a6</code>). </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open your repository in VS&nbsp;Code and switch to the Copilot panel. Click <strong>Agent</strong> to enter Agent mode.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> In the Agent prompt type <code>Summarise auth module changes across commits a1…a6 in this repo</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Wait while the Agent calls the repo search tool and analyses each commit. A structured summary appears describing added files removed functions and key behaviour changes.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Copy the summary to your clipboard or click <strong>Insert to editor</strong> to save it in <code>docs/auth-change-log.md</code>.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> If any detail is unclear ask a follow up question such as <code>Show code diff for the login validator refactor</code> and review the answer.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Commit the summary file on a new branch and push for review.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did the Agent return a clear description of all six commits</p> <input type="radio" name="q1"> Yes&nbsp;&nbsp; <input type="radio" name="q1"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you ask at least one follow up question to clarify a change</p> <input type="radio" name="q2"> Yes&nbsp;&nbsp; <input type="radio" name="q2"> No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you save or share the summary with your team</p> <input type="radio" name="q3"> Yes&nbsp;&nbsp; <input type="radio" name="q3"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode" target="_blank">Copilot Agents overview</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Doc to spec converter', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this exercise you will use <strong>GitHub Copilot Agents</strong> inside VS&nbsp;Code to summarise a set of commits that modified your module (eg:Authentication module). You will ask the Agent <code>Summarise auth module changes across commits a1…a6 in this repo</code> then review the generated overview. Plan about fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Enabling Copilot Agent mode in VS&nbsp;Code.</p> </li> <li> <p>Prompting an Agent to analyse multiple commits.</p> </li> <li> <p>Reading a concise natural language diff summary.</p> </li> <li> <p>Sharing the summary with your team or attaching it to a pull request.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Install the latest <strong>GitHub Copilot </strong> extension in VS&nbsp;Code and enable Agent mode under <strong>Settings &gt; GitHub Copilot &gt; Agents</strong>. Ensure you have at least six sequential commits that touched the module (ex: authentication) and know their hashes (for example <code>a1</code> through <code>a6</code>). </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open your repository in VS&nbsp;Code and switch to the Copilot panel. Click <strong>Agent</strong> to enter Agent mode.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> In the Agent prompt type <code>Summarise auth module changes across commits a1…a6 in this repo</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Wait while the Agent calls the repo search tool and analyses each commit. A structured summary appears describing added files removed functions and key behaviour changes.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Copy the summary to your clipboard or click <strong>Insert to editor</strong> to save it in <code>docs/auth-change-log.md</code>.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> If any detail is unclear ask a follow up question such as <code>Show code diff for the login validator refactor</code> and review the answer.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Commit the summary file on a new branch and push for review.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did the Agent return a clear description of all six commits</p> <input type="radio" name="q1"> Yes&nbsp;&nbsp; <input type="radio" name="q1"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you ask at least one follow up question to clarify a change</p> <input type="radio" name="q2"> Yes&nbsp;&nbsp; <input type="radio" name="q2"> No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you save or share the summary with your team</p> <input type="radio" name="q3"> Yes&nbsp;&nbsp; <input type="radio" name="q3"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode" target="_blank">Copilot Agents overview</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'PRD - Stories - Code (voice-first)', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this end-to-end workflow you will start with a lightweight Product Requirements Document named <code>product-x.prd.md</code>. Using <strong>GitHub Copilot Chat in Agent mode with voice input </strong>you will:</p> <ol> <li>Extract epics user stories and acceptance criteria.</li> <li>Draft a Gherkin specification.</li> <li>Scaffold initial code stubs and tests on a new branch.</li> <li>Review the output, commit, and open a pull request.</li> <li>Plan about thirty minutes.</li> </ol> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Writing a concise PRD in markdown.</p> </li> <li> <p>Using Copilot Chat voice input to issue multi step prompts.</p> </li> <li> <p>Converting product language into epics user stories and Gherkin specs.</p> </li> <li> <p>Generating starter code and tests directly from requirements.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Enable microphone permissions for Copilot Chat in VS&nbsp;Code. Confirm you have write access to the repository and an available test runner (Jest PyTest JUnit or similar). Create <code>docs/product-x.prd.md</code> with a brief description of the new feature. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Create and check out a branch called <code>feature-product-x</code> using <code>git checkout -b feature-product-x</code>.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Open Copilot Chat and click the microphone icon (or press the assigned shortcut) then dictate: <code>Extract epics user stories and acceptance criteria from docs/product-x.prd.md</code>. Wait for Copilot to return structured lists.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> With voice still active ask: <code>Draft a Gherkin specification for these stories</code>. Accept the generated <code>product-x.feature</code> file into <code>tests/features/</code>.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Speak: <code>Scaffold initial code stubs and unit tests in src/productX/</code>. Copilot adds empty classes functions and matching test files.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Run your test suite with <code>npm test</code> <code>pytest</code> or equivalent. All tests should fail gracefully indicating todo stubs that await implementation.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Stage all new files with <code>git add docs/product-x.prd.md src/ tests/</code> then commit. Let Copilot draft the commit message.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Push the branch and open a pull request titled <code>feat: scaffold Product X epics stories Gherkin and stubs</code>.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did Copilot generate epics user stories and acceptance criteria from the PRD</p> <input type="radio" name="q1"> Yes&nbsp;&nbsp; <input type="radio" name="q1"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the Gherkin spec file save under <code>tests/features</code></p> <input type="radio" name="q2"> Yes&nbsp;&nbsp; <input type="radio" name="q2"> No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you commit and push the scaffold branch and open a pull request</p> <input type="radio" name="q3"> Yes&nbsp;&nbsp; <input type="radio" name="q3"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode" target="_blank">Copilot Agents overview</a></p> </li> <li> <p><a href="https://githubnext.com/projects/copilot-voice/" target="_blank">Copilot Voice overview</a></p> </li> <li> <p><a href="https://code.visualstudio.com/docs/configure/accessibility/voice" target="_blank">Personalizing Copilot Voice</a></p> </li> <li> <p><a href="https://cucumber.io/docs/gherkin/" target="_blank">Gherkin syntax guide</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Build a custom MCP tool', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this advanced exercise you will fork your organisation’s local <strong>Model-Context-Protocol (MCP) server</strong>, add a custom “Jira issue creator” tool, and then call that tool from <strong>GitHub Copilot Agent mode</strong> to open a real Jira ticket. Set aside about thirty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Forking and running a local MCP server repository.</p> </li> <li> <p>Implementing a new tool endpoint that calls the Jira REST API.</p> </li> <li> <p>Registering the tool in <code>tools/index.ts</code> (or <code>.py</code>) so Agents can discover it.</p> </li> <li> <p>Invoking the tool from Copilot Agent mode in VS&nbsp;Code to create a live Jira issue.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Install the latest <strong>GitHub Copilot Nightly</strong> extension in VS&nbsp;Code and enable Agent mode under <strong>Settings &gt; GitHub Copilot &gt; Agents</strong>. Make sure you have: 1. An organisation repo named <code>mcp-server</code> (or similar) you can fork. 2. A Jira cloud instance and a personal API token. 3. <code>node</code> or <code>python</code> (match the server’s language) installed locally. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Fork <code>github.com/your-org/mcp-server</code> to your account then clone the fork locally. Run <code>npm install</code> or <code>pip install -r requirements.txt</code> as required.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> In the <code>tools/</code> folder create <code>jiraIssueCreator.js</code>. Implement a function that accepts <code>title</code> and <code>description</code> then POSTs to <code>https://your-domain.atlassian.net/rest/api/3/issue</code> using your API token.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Export the tool in <code>tools/index.js</code> under the key <code>"create_jira_issue"</code> with a JSON schema describing the fields.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Start the MCP server locally with <code>npm start</code> or <code>python main.py</code>. Verify <code>http://localhost:4891/health</code> returns <code>{"status":"ok"}</code>.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> In VS&nbsp;Code go to <strong>Settings &gt; GitHub Copilot &gt; MCP Endpoint</strong> and set the endpoint to <code>http://localhost:4891</code>. Reload the window.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Open any file and switch to Copilot Agent mode. Type <code>Create a Jira bug: User cannot reset password</code> and press Enter.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> The Agent calls <code>create_jira_issue</code>. Accept the tool call preview, wait for success, then check Jira for the new ticket.</p> </li> <li> <p><strong>Step&nbsp;8.</strong> Commit your tool code to the fork and open a pull request back to the organisation repo.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did the MCP server start locally and pass the health check</p> <input type="radio" name="q1"> Yes&nbsp;&nbsp; <input type="radio" name="q1"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the Agent successfully create a live Jira ticket via the new tool</p> <input type="radio" name="q2"> Yes&nbsp;&nbsp; <input type="radio" name="q2"> No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you push the custom tool to a branch and open a pull request</p> <input type="radio" name="q3"> Yes&nbsp;&nbsp; <input type="radio" name="q3"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://docs.github.com/en/copilot/customizing-copilot/extending-copilot-chat-with-mcp" target="_blank">Copilot MCP project overview</a> </p> </li> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode" target="_blank">Copilot Agents overview</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Agent driven repo clean up', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this exercise you will use <strong>GitHub Copilot Agent mode</strong> to automate a repository clean up. You will prompt the Agent to find dead code paths across the project and create a pull request that removes them. After reviewing the changes and running tests you will merge the pull request. Set aside twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Prompting Copilot Agents for repository wide analysis.</p> </li> <li> <p>Letting the Agent generate a branch and pull request automatically.</p> </li> <li> <p>Reviewing deletions to confirm only dead code is removed.</p> </li> <li> <p>Running tests before merging automated clean-up changes.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Install the latest <strong>GitHub Copilot</strong> extension in VS&nbsp;Code and enable Agent mode under <strong>Settings &gt; GitHub Copilot &gt; Agents</strong>. Ensure your repository builds cleanly and that all tests pass with <code>npm test</code> <code>pytest</code> <code>dotnet test</code> or your framework’s command. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Open the repository in VS&nbsp;Code and switch to the Copilot panel. Click <strong>Agent</strong> to enter Agent mode.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> In the Agent prompt type <code>Find dead code paths in this repo and open a PR deleting them</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Wait while the Agent performs static analysis, creates a new branch for example <code>agent-dead-code-cleanup</code> and opens a pull request.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Open the pull request in GitHub. Review the diff to ensure only unused code paths are removed and no critical logic is affected.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Run your full test suite <code>npm test</code> <code>pytest</code> <code>dotnet test</code> or rely on continuous integration checks. Confirm all tests pass.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> If any test fails ask the Agent a follow-up prompt such as <code>Undo removal of misidentified function validateUser</code> apply the patch, then rerun tests.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Once tests pass click <strong>Merge pull request</strong>. Delete the branch if prompted.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did the Agent open a pull request that deleted only dead code</p> <input type="radio" name="q1"> Yes&nbsp;&nbsp; <input type="radio" name="q1"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did all tests pass after the clean up</p> <input type="radio" name="q2"> Yes&nbsp;&nbsp; <input type="radio" name="q2"> No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you merge the pull request and delete the clean up branch</p> <input type="radio" name="q3"> Yes&nbsp;&nbsp; <input type="radio" name="q3"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode" target="_blank">Copilot Agents overview</a></p> </li> <li> <p><a href="https://docs.github.com/en/actions/using-workflows" target="_blank">Setting up tests in GitHub Actions</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Multimodal bug hunt with Vision', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this multimodal bug hunt you will capture a screenshot of a visual bug in your own application and feed it to <strong>GitHub Copilot Agent mode with Vision Preview</strong>. The Agent will compare the screenshot to the Figma design export checked into your repository and propose code fixes. You will apply the patch then verify the UI renders correctly. Reserve about twenty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Capturing and attaching UI screenshots to Copilot Chat Vision.</p> </li> <li> <p>Referencing a Figma design export stored in the repo.</p> </li> <li> <p>Prompting the Agent to generate code fixes based on visual differences.</p> </li> <li> <p>Running and visually verifying the application after applying the patch.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Install the latest <strong>GitHub Copilot Nightly</strong> extension in VS&nbsp;Code and enable both Agent mode and Vision Preview under <strong>Settings &gt; GitHub Copilot</strong>. Ensure your repository contains the Figma design export for the affected screen for example <code>design/login-page.png</code>. Start your development server with <code>npm start</code> <code>yarn dev</code> or similar so you can reproduce the bug. </p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Reproduce the visual bug in your browser then take a screenshot (for example <code>bug.png</code>) and save it in the repo under <code>docs/bugs/</code>.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Create a new branch named <code>vision-bugfix</code> with <code>git checkout -b vision-bugfix</code> or via the source control panel.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Open Copilot Chat and switch to <strong>Agent</strong> mode.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Drag <code>docs/bugs/bug.png</code> into the chat box. After the thumbnail appears drag the Figma export <code>design/login-page.png</code> into the same prompt.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Type <code>Compare the bug screenshot to the Figma design and propose code fixes</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Review the plan and patch the Agent suggests. Accept the patch with <strong>Tab</strong> or paste it into the correct file then save changes.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Refresh the browser running the dev server to confirm the UI now matches the design.</p> </li> <li> <p><strong>Step&nbsp;8.</strong> Commit the fix with a descriptive message generated by you or drafted by Copilot then push the branch and open a pull request.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did the Agent highlight the exact visual differences between screenshot and design</p> <input type="radio" name="q1"> Yes&nbsp;&nbsp; <input type="radio" name="q1"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the generated patch compile and render without errors</p> <input type="radio" name="q2"> Yes&nbsp;&nbsp; <input type="radio" name="q2"> No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Does the fixed page now match the Figma design when viewed in the browser</p> <input type="radio" name="q3"> Yes&nbsp;&nbsp; <input type="radio" name="q3"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode" target="_blank">Copilot Agents overview</a></p> </li> <li> <p><a href="https://help.figma.com/hc/en-us/articles/360040028114-Export-from-Figma-Design" target="_blank">Exporting frames from Figma</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Enterprise policy testing', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this governance exercise you will run the <strong>/policy</strong> slash command in GitHub&nbsp;Copilot&nbsp;Chat to generate a <code>.github/copilot-policy.yml</code> file that blocks model usage on files containing secrets. You will commit the policy file on a new branch and open a pull request for organisational review. Plan about fifteen minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p>Invoking the <code>/policy</code> command in Copilot Chat.</p> </li> <li> <p>Configuring a policy to restrict AI suggestions on secret-related paths.</p> </li> <li> <p>Committing the policy file and opening a pull request for review.</p> </li> <li> <p>Understanding responsible AI controls in GitHub&nbsp;Copilot&nbsp;Enterprise.</p> </li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Copilot policy management requires <strong>GitHub&nbsp;Copilot&nbsp;Enterprise</strong>. Confirm you have write access to an organisation repository and that Copilot Chat is enabled in your IDE (VS&nbsp;Code JetBrains or Visual&nbsp;Studio). The Copilot policy management feature is available only with GitHub Copilot Enterprise.</p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Create a branch named <code>copilot-policy-secrets</code> with <code>git checkout -b copilot-policy-secrets</code> or your IDE branch UI.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Open Copilot Chat in your IDE and type <code>/policy</code> then press Enter.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> In the policy prompt choose to <em>Disallow model usage</em> on files matching patterns such as <code>**/*secrets*.yml</code> and <code>**/.env</code>. Accept the generated <code>.github/copilot-policy.yml</code>.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Review the YAML in the editor to ensure the <code>blocked_paths</code> section includes the desired globs.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Stage the file with <code>git add .github/copilot-policy.yml</code> then commit with a message such as <code>chore: add Copilot policy to block secrets files</code>. You may let Copilot draft the commit message.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Push the branch and open a pull request. Request at least one teammate to review the new policy.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Once approved merge the pull request to enforce the policy on the default branch.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did <code>.github/copilot-policy.yml</code> include blocked paths for secret files</p> <input type="radio" name="q1"> Yes&nbsp;&nbsp; <input type="radio" name="q1"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did you open a pull request for team review of the new policy</p> <input type="radio" name="q2"> Yes&nbsp;&nbsp; <input type="radio" name="q2"> No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Was the branch merged so the policy is active on the default branch</p> <input type="radio" name="q3"> Yes&nbsp;&nbsp; <input type="radio" name="q3"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><a href="https://docs.github.com/en/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization" target="_blank">Organisation policies for Copilot</a></p> </li> <li> <p><a href="https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-secrets-in-github-actions" target="_blank">Best practices for managing secrets in repos</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Automated PR review rules', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this challenge, you’ll enable GitHub Copilot’s <strong>Review changes</strong> feature to provide AI-generated suggestions on your pull requests. After configuring your repository to use Copilot for reviews, you’ll open a pull request and see Copilot’s inline review comments in action. This activity takes about fifteen minutes. Note that some of the features in this challenge requires <strong>GitHub Enterpise.</strong></p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li><p>How to enable GitHub Copilot’s review features for pull requests.</p></li> <li><p>How to interpret Copilot-generated feedback and suggestions.</p></li> <li><p>How to act on Copilot’s comments by updating your code or replying in threads.</p></li> <li><p>How to complete the review and merge process with both AI and human approvals.</p></li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> You need <strong>GitHub Copilot </strong> access and appropriate permissions to open pull requests in the target repository. Ensure that GitHub Copilot is enabled for your account and the repository. The <strong>Review changes</strong> feature uses premium Copilot requests.</p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li><p><strong>Step&nbsp;1.</strong> In the browser, open the repository and create a new branch using <code>git checkout -b copilot-review-test</code>. Make a small change in the code.</p></li> <li><p><strong>Step&nbsp;2.</strong> Push the branch to GitHub and open a pull request as usual.</p></li> <li><p><strong>Step&nbsp;3.</strong> In the pull request view, click the <strong>Copilot</strong> button and select <strong>Review changes</strong>.</p></li> <li><p><strong>Step&nbsp;4.</strong> Wait for Copilot to generate its review. Copilot will leave inline comments with suggested improvements, bug fixes, or explanations.</p></li> <li><p><strong>Step&nbsp;5.</strong> Respond to at least one comment by either updating your code or replying directly in the conversation.</p></li> <li><p><strong>Step&nbsp;6.</strong> Request a human review if needed, then complete the merge once both AI and human reviewers (if required) have approved.</p></li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did you successfully initiate a Copilot review on a pull request?</p> <input type="radio" name="q1"> Yes&nbsp;&nbsp; <input type="radio" name="q1"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did Copilot leave any inline comments or suggestions?</p> <input type="radio" name="q2"> Yes&nbsp;&nbsp; <input type="radio" name="q2"> No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you respond to at least one suggestion and merge the pull request?</p> <input type="radio" name="q3"> Yes&nbsp;&nbsp; <input type="radio" name="q3"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li><p><a href="https://docs.github.com/en/copilot/using-github-copilot/code-review/using-copilot-code-review" target="_blank">Using Copilot for code review</a></p></li> <li><p><a href="https://docs.github.com/en/pull-requests" target="_blank">Working with pull requests</a></p></li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Context augmented agent', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this advanced workflow, you’ll configure a <strong>GitHub Copilot knowledge base</strong> so that the Copilot Agent can reference your organization’s internal documentation. You’ll then ask the Agent to draft an <abbr title="Architecture Decision Record">ADR</abbr> proposing a migration from a monolith to microservices. This task takes about thirty minutes.</p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li><p>Creating and managing a GitHub Copilot knowledge base.</p></li> <li><p>Adding document sources to the knowledge base.</p></li> <li><p>Connecting a Copilot Agent in VS&nbsp;Code to your knowledge base.</p></li> <li><p>Prompting the Agent to draft an ADR using contextual knowledge.</p></li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Ensure your organization has <strong>GitHub Copilot Enterprise</strong> enabled. You must be an organization owner or have appropriate permissions to manage Copilot settings. Prepare your documentation (Markdown, text, or supported formats) and ensure it is stored in a GitHub repository or external location that can be added to a knowledge base.</p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Navigate to your organization settings on GitHub.com. Under <strong>Copilot</strong>, click <strong>Knowledge bases</strong>, then click <strong>New knowledge base</strong>.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> Give your knowledge base a name (e.g., <code>Architecture Docs</code>) and add sources. You can include repositories, folders, or external links as needed.</p> </li> <li> <p><strong>Step&nbsp;3.</strong> Save the knowledge base and ensure it''s accessible to Copilot Agents in your organization.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> In VS&nbsp;Code, switch to Copilot <strong>Agent</strong> mode and confirm your organization’s knowledge base appears in the sidebar.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Create a new branch with <code>git checkout -b adr-microservices</code>. Then in the Agent chat, type: <br> <code>Draft an Architecture Decision Record for migrating our monolith to microservices using our current architecture documents as context.</code> </p> </li> <li> <p><strong>Step&nbsp;6.</strong> Review the generated ADR, which should include: <em>Context</em>, <em>Decision</em>, <em>Status</em>, and <em>Consequences</em>.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Save the draft to <code>docs/adr/0005-microservices-migration.md</code>, make any organization-specific edits, commit the file, and push the branch for review.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did you successfully configure a Copilot knowledge base?</p> <input type="radio" name="q1"> Yes&nbsp;&nbsp; <input type="radio" name="q1"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the Agent cite information from your documentation in the ADR draft?</p> <input type="radio" name="q2"> Yes&nbsp;&nbsp; <input type="radio" name="q2"> No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did you commit and push the ADR for review?</p> <input type="radio" name="q3"> Yes&nbsp;&nbsp; <input type="radio" name="q3"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li><p><a href="https://docs.github.com/en/enterprise-cloud@latest/copilot/customizing-copilot/managing-copilot-knowledge-bases" target="_blank">Managing Copilot knowledge bases</a></p></li> <li><p><a href="https://githubnext.com/projects/copilot-workspace" target="_blank">Copilot Agents and Workspace overview</a></p></li> <li><p><a href="https://adr.github.io/madr/" target="_blank">Markdown ADR template</a></p></li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Cross repo migration assistant', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p> In this multi-repository automation task, you’ll use <strong>GitHub Copilot (Pro/Pro+/Business)</strong> inside VS&nbsp;Code to build GitHub Actions workflows that automate updates to import paths when a shared <code>utils</code> package is moved into a monorepo. You’ll create workflows for three satellite repositories—<code>repo-A</code>, <code>repo-B</code>, and <code>repo-C</code>—and validate the process with test runs and pull requests. Allocate thirty minutes. </p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li><p>Using GitHub Copilot to generate Actions workflows for cross-repo automation.</p></li> <li><p>Updating import paths in satellite repositories in response to monorepo changes.</p></li> <li><p>Coordinating CI triggers and jobs using reusable workflows or dispatch events.</p></li> <li><p>Reviewing Copilot-assisted PRs and verifying test results.</p></li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p> Install the latest <strong>GitHub Copilot extension</strong> in VS&nbsp;Code and ensure you have an active subscription. Confirm push rights to the monorepo and all satellite repositories. Make sure each repo has working CI pipelines configured using GitHub Actions.</p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li> <p><strong>Step&nbsp;1.</strong> Move the <code>utils</code> package into the monorepo under <code>packages/utils</code>. Commit and push the changes.</p> </li> <li> <p><strong>Step&nbsp;2.</strong> In each satellite repository, open <code>.github/workflows/update-utils.yml</code> and use GitHub Copilot to generate a workflow that: <ol> <li>Watches for new releases or changes in the monorepo’s <code>utils</code> package.</li> <li>Checks out the code.</li> <li>Replaces old import paths (e.g., <code>../../utils</code>) with <code>@org/utils</code>.</li> <li>Creates a pull request with the updated imports.</li> </ol> </p> </li> <li> <p><strong>Step&nbsp;3.</strong> Push the workflow file and manually trigger it using the GitHub Actions UI or through a <code>repository_dispatch</code> event from the monorepo.</p> </li> <li> <p><strong>Step&nbsp;4.</strong> Review the pull request opened by the GitHub Action in each repository. Confirm the import path updates are accurate.</p> </li> <li> <p><strong>Step&nbsp;5.</strong> Wait for CI to complete in each satellite repo. If needed, prompt Copilot with follow-up requests like <code>Fix broken tests after utils migration</code> to generate patches.</p> </li> <li> <p><strong>Step&nbsp;6.</strong> Once all builds pass, merge the pull requests in <code>repo-A</code>, <code>repo-B</code>, and <code>repo-C</code>.</p> </li> <li> <p><strong>Step&nbsp;7.</strong> Clean up any obsolete <code>utils</code> folders in satellite repos and confirm that your imports rely only on the monorepo package.</p> </li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Did you use Copilot to create a GitHub Action workflow in each satellite repo?</p> <input type="radio" name="q1"> Yes&nbsp;&nbsp; <input type="radio" name="q1"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did the workflows open pull requests with correct import path updates?</p> <input type="radio" name="q2"> Yes&nbsp;&nbsp; <input type="radio" name="q2"> No </div> <div style="margin-top:20px;"> <p>3.&nbsp;Did all tests pass and changes get merged?</p> <input type="radio" name="q3"> Yes&nbsp;&nbsp; <input type="radio" name="q3"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li><p><a href="https://docs.github.com/en/actions/using-workflows" target="_blank">Using GitHub Actions workflows</a></p></li> <li><p><a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#repository_dispatch" target="_blank">Triggering workflows across repositories</a></p></li> <li> <p><a href="https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode" target="_blank">Copilot Agents overview</a></p> </li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Custom Chat Mode', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p>In this advanced exercise, you will create a <strong>.chatmode.md</strong> persona called <em>CI/CD Release Manager</em> that instructs GitHub Copilot to assist with release pipelines, tagging, and changelog generation. Estimated time: thirty minutes.</p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li>Creating a <code>.chatmode.md</code> file to define a custom Copilot persona.</li> <li>Guiding Copilot’s responses to focus on CI/CD workflows.</li> <li>Integrating and activating a chat mode in VS&nbsp;Code Copilot Chat.</li> <li>Applying persona-driven suggestions to automate release processes.</li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p>Ensure you have the latest GitHub Copilot Chat extension in VS&nbsp;Code, and a repository containing at least one GitHub Actions workflow for CI/CD.</p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li><strong>Step 1.</strong> Create a folder <code>.github/chatmodes</code> in your repo.</li> <li><strong>Step 2.</strong> Add a file <code>ci-cd-release-manager.chatmode.md</code> with persona instructions, limiting scope to CI/CD YAML edits, semantic versioning, and changelog automation.</li> <li><strong>Step 3.</strong> Reload VS&nbsp;Code to load the new chat mode.</li> <li><strong>Step 4.</strong> In Copilot Chat, switch to “CI/CD Release Manager” mode.</li> <li><strong>Step 5.</strong> Prompt: <code>Prepare a GitHub Actions workflow to handle semantic version bumping based on commit messages and auto-generate a changelog.</code></li> <li><strong>Step 6.</strong> Review, refine, and commit the generated workflow.</li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Was the chat mode activated successfully?</p> <input type="radio"> Yes &nbsp;&nbsp; <input type="radio"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did Copilot suggest a workflow following persona guidelines?</p> <input type="radio"> Yes &nbsp;&nbsp; <input type="radio"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li><a href="https://code.visualstudio.com/docs/copilot/copilot-customization" target="_blank">Customizing Copilot</a></li> <li><a href="https://docs.github.com/en/actions" target="_blank">GitHub Actions documentation</a></li> </ul> </div>', SYSDATETIME(), 12);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Prompt Templates', N'<div class="container" style="max-width:960px;background:#ffffff;padding:20px;"> <!-- Summary --> <p style="font-weight:600;font-size:1.25rem;">Summary</p> <p>In this challenge, you will create a <strong>.prompt.md</strong> file that leverages GPT-5 Smart Mode to deeply analyze multi-step code logic, identify edge cases, and suggest improvements. You will also validate that the prompt is discovered by Copilot Chat, that Smart Mode is used, and that outputs are specific and actionable. Estimated time: ~20 minutes.</p> <!-- What you will learn --> <p style="font-weight:600;font-size:1.25rem;">What you will learn</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li>Creating reusable prompt templates in GitHub Copilot and structuring them for repeatable analysis.</li> <li>Triggering Smart Mode model routing for complex reasoning tasks and confirming the active model.</li> <li>Re-using and iterating on prompts across different code snippets to drive concrete refactors and tests.</li> </ul> <!-- Before you start --> <p style="font-weight:600;font-size:1.25rem;">Before you start</p> <p>Ensure you are signed in to GitHub in VS Code, have the latest GitHub Copilot extension installed, GPT-5 Smart Mode available, and permission to add <code>.prompt.md</code> files to the repository. Keep a small snippet (30–120 lines) ready for analysis and make sure the repo opens cleanly in VS Code.</p> <!-- Steps --> <p style="font-weight:600;font-size:1.25rem;">Steps</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li><strong>Step 1.</strong> Create the folder <code>.github/prompts</code> at the repository root (create both directories if they don’t exist) and commit the empty folder with a placeholder file if required by your tooling.</li> <li><strong>Step 2.</strong> Add a new file <code>code-logic-explorer.prompt.md</code> containing a short title, a one-line goal, variables like <code>{{CODE_SNIPPET}}</code>, and explicit instructions, e.g., “analyze control flow, error handling, state transitions, time/space complexity, edge cases, and propose test cases.” Save the file.</li> <li><strong>Step 3.</strong> Commit the file and ensure Copilot discovers it: in VS Code, reload the window (Command Palette → “Developer: Reload Window”) or reopen the workspace so the prompt catalog refreshes.</li> <li><strong>Step 4.</strong> Open Copilot Chat and load the prompt. Use the prompt picker to select <em>code-logic-explorer</em> or reference it directly (e.g., “Use <em>code-logic-explorer</em> with the following code”). Paste your code into the <code>{{CODE_SNIPPET}}</code> slot using triple backticks.</li> <li><strong>Step 5.</strong> Confirm Smart Mode: start the run and watch for Copilot switching to GPT-5 Smart Mode for deeper reasoning. If Smart Mode doesn’t activate, check the model picker in Copilot Chat and manually select <em>GPT-5 mini</em>.</li> <li><strong>Step 6.</strong> Guide specificity: if the analysis feels generic, ask for concrete outputs—e.g., “list 5 edge cases with inputs/expected outputs,” “provide 3 unit tests in my test framework,” “explain risk of race conditions with a minimal example,” “estimate time/space complexity and cite hot paths.”</li> <li><strong>Step 7.</strong> Apply changes safely: create a new branch, implement the highest-value refactors suggested, and run your test suite (or create tests from the generated cases). Capture any performance or readability improvements.</li> <li><strong>Step 8.</strong> Iterate: re-run the same prompt against the updated code to verify that previously flagged issues are resolved and to surface second-order issues (e.g., error propagation, boundary conditions, I/O timeouts).</li> <li><strong>Step 9.</strong> Reuse: run the prompt on a second snippet (e.g., a sibling module or related function) to confirm portability. Tweak the prompt wording only if you consistently see gaps in the analysis.</li> <li><strong>Step 10.</strong> Troubleshooting quick fixes: if Smart Mode doesn’t trigger—open the model picker in Copilot Chat and select <em>GPT-5 mini</em>; if the prompt file isn’t recognized—verify the path is exactly <code>.github/prompts/</code>, the file ends with <code>.prompt.md</code>, commit and reload VS Code; if the output is too generic—narrow scope (smaller snippet), request numbered findings with code pointers and test cases, and ask for “fail-first” examples.</li> </ul> <!-- Checkpoint --> <p style="font-weight:600;font-size:1.25rem;">Checkpoint</p> <div style="margin-top:20px;"> <p>1.&nbsp;Was the prompt template discovered (correct path/name) and executed with your <code>{{CODE_SNIPPET}}</code>?</p> <input type="radio"> Yes &nbsp;&nbsp; <input type="radio"> No </div> <div style="margin-top:20px;"> <p>2.&nbsp;Did Copilot run in Smart Mode and produce specific, testable recommendations (edge cases, tests, refactors)?</p> <input type="radio"> Yes &nbsp;&nbsp; <input type="radio"> No </div> <!-- Explore more --> <p style="font-weight:600;font-size:1.25rem;">Want to explore more</p> <ul style="font-size:1.1rem;line-height:1.6;"> <li><a href="https://code.visualstudio.com/docs/copilot/copilot-customization" target="_blank">Customizing Copilot with prompt files in VS Code</a></li> <li><a href="https://github.blog/" target="_blank">Deep dives and tips on the GitHub Copilot Blog</a></li> </ul> </div>', SYSDATETIME(), 12);


<!-- This script inserts Learn modules data into the Challenges table.-->
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Introduction to GitHub Copilot', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> GitHub Copilot uses OpenAI Codex to suggest code and entire functions in real time, right from your editor. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>In this module, you will:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Learn how GitHub Copilot can help you code by offering autocomplete-style suggestions.</li> <li>Learn about the various ways to trigger GitHub Copilot.</li> <li>Learn about the differences among GitHub Copilot Individual, Business, and Enterprise.</li> <li>Learn how to configure GitHub Copilot.</li> <li>Troubleshoot GitHub Copilot.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/introduction-to-github-copilot/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Introduction to Prompt Engineering with GitHub Copilot', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> Discover the essentials of creating effective prompts with GitHub Copilot. Uncover techniques to transform your coding comments into precise, actionable code, enhancing your development workflow. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''''re able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Craft effective prompts that optimize GitHub Copilot''''s performance, ensuring precision and relevance in every code suggestion.</li> <li>Understand the intricate relationship between prompts and Copilot''''s responses, and utilize best practices in prompt engineering.</li> <li>Gain insights into the underlying mechanism of how GitHub Copilot handles user prompts, from secure transmission to content filtering and context analysis.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/introduction-prompt-engineering-with-github-copilot/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Building Applications with GitHub Copilot Agent Mode', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> Learn how to build applications using GitHub Copilot Agent Mode by prompting autonomous development tasks, using documentation for guidance, and understanding how Agent Mode iteratively manages, refactors, and improves your codebase. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>In this module, you''ll:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Understand how to develop with VS Code IDE in a GitHub Codespace.</li> <li>Prompt GitHub Copilot agent mode to create an application.</li> <li>Leverage documentation files to instruct GitHub Copilot agent mode.</li> <li>Understand how GitHub Copilot agent mode iterates over a code base to:</li> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Fix errors</li> <li>Refactor code</li> <li>Develop new features</li> </ul> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/github-copilot-agent-mode/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Responsible AI with GitHub Copilot', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> This module explores the responsible use of AI in the context of GitHub Copilot, a generative AI tool for developers. It will equip you with the knowledge and skills to leverage Copilot effectively while mitigating potential ethical and operational risks associated with AI usage. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, students will be able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Understand and apply the principles of Responsible AI usage.</li> <li>Identify limitations and mitigate risks associated with AI.</li> <li>Learn best practices for ensuring AI-generated code aligns with ethical standards and project-specific requirements.</li> <li>Recognize the importance of transparency and accountability in AI systems to build trust and maintain user confidence.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/responsible-ai-with-github-copilot/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Using Advanced GitHub Copilot Features', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> Use advanced GitHub Copilot features with a Python application. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''ll be able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Apply slash commands to make code changes.</li> <li>Interact with GitHub Copilot using the Chat feature.</li> <li>Ask questions about your project using an agent.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/advanced-github-copilot/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'GitHub Copilot Across Environments: IDE, Chat, and Command Line Techniques', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> Explore the multifaceted capabilities of GitHub Copilot across various development environments. Learn to harness AI-assisted coding in your IDE, engage in natural language conversations for complex tasks, and enhance your command-line productivity. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>At the end of this module, you''ll be able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Understand how to utilize GitHub Copilot''s auto-suggestions, multiple suggestions pane, and its ability to adapt to different coding styles.</li> <li>Understand how to provide context to GitHub Copilot through inline comments, block comments, doc strings, and other types of comments to enhance code generation accuracy.</li> <li>Understand how to interact with GitHub Copilot through natural language conversations to generate complex code, debug issues, and obtain code explanations in real-time.</li> <li>Understand how to improve the relevance of GitHub Copilot Chat''s suggestions by using scope referencing, slash commands, and agents.</li> <li>Understand how to interact with GitHub Copilot in CLI to get command explanations, suggestions, and even execute commands based on specific needs.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/github-copilot-across-environments/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Management and Customization Considerations with GitHub Copilot', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> In this module, we explore management and customization considerations with GitHub Copilot. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''ll:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Understand the GitHub Copilot plans and their associated management and customization features.</li> <li>Gain insight into the contractual protections in GitHub Copilot and disabling matching public code.</li> <li>Know how to manage content exclusions.</li> <li>Recognize common problems with GitHub Copilot and their solutions.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/github-copilot-management-and-customizations/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Get Started with GitHub Copilot', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> This module introduces developers to the GitHub Copilot products, the benefits that GitHub Copilot provides to developers, the GitHub Copilot and GitHub Copilot Chat product features, and the GitHub Copilot extensions for Visual Studio Code. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''ll be able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Explain what GitHub Copilot is and the advantages it provides.</li> <li>Install the GitHub Copilot extensions for Visual Studio Code.</li> <li>Explain the features of the GitHub Copilot extensions for Visual Studio Code and how to use them.</li> <li>Configure the GitHub Copilot extensions for Visual Studio Code.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/get-started-github-copilot/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Using GitHub Copilot with Python', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> GitHub Copilot is an AI pair programmer that offers autocomplete-style suggestions as you code in Python. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''re able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Enable the GitHub Copilot extension in Visual Studio Code.</li> <li>Craft prompts that can generate useful suggestions from GitHub Copilot.</li> <li>Use GitHub Copilot to improve a Python project.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/introduction-copilot-python/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Develop Unit Tests Using GitHub Copilot Tools', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> This module explores using GitHub Copilot and GitHub Copilot Chat to create unit tests. Exercises provide practical experience creating unit test projects and running unit tests in Visual Studio Code. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''re able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Create unit tests using the GitHub Copilot and GitHub Copilot Chat extensions for Visual Studio Code.</li> <li>Create unit tests that target edge cases and specific conditions using the GitHub Copilot and GitHub Copilot Chat extensions for Visual Studio Code.</li> <li>Use Visual Studio Code, the .NET SDK, and the C# Dev Kit extension to create a test project and verify that your unit tests build and run successfully.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/develop-unit-tests-using-github-copilot-tools/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Introduction to GitHub Copilot Enterprise', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> Learn about the differences between GitHub Copilot for Enterprise, for Business, and for Individuals. Examine specific use cases, including how to enable and use GitHub Copilot Enterprise. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''ll be able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Understand what the GitHub Copilot Enterprise plan is.</li> <li>Understand the differences between GitHub Copilot Enterprise versus Business versus Individual.</li> <li>Learn about specific use cases for GitHub Copilot Enterprise and hear how customers are enhancing their productivity.</li> <li>Review how to enable GitHub Copilot Enterprise.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/introduction-to-github-copilot-enterprise/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Using GitHub Copilot with JavaScript', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> To work with JavaScript, take advantage of GitHub Copilot, an AI pair programmer that boosts productivity with autocomplete-style suggestions. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''re able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Enable the GitHub Copilot extension in Visual Studio Code.</li> <li>Craft prompts that can generate useful suggestions from GitHub Copilot.</li> <li>Use GitHub Copilot to improve a JavaScript project.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/introduction-copilot-javascript/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Developer Use Cases for AI with GitHub Copilot', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> This module explores how GitHub Copilot streamlines developer productivity through AI-powered features. It enhances the Software Development Life Cycle (SDLC), aligns with developer preferences, and identifies key limitations. Additionally, it measures productivity gains effectively. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''re able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Identify specific ways GitHub Copilot integrates seamlessly into developer workflows, enhancing the overall development experience and supporting individual coding preferences.</li> <li>Explore GitHub Copilot''s potential impact on different stages of the Software Development Lifecycle.</li> <li>Evaluate the limitations of AI-assisted coding and measure its impact on development efficiency.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/developer-use-cases-for-ai-with-github-copilot/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Introduction to GitHub Copilot for Business', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> Learn about the difference between GitHub Copilot Business versus GitHub Copilot Individuals. Also learn about specific use cases and customer stories for GitHub Copilot Business as well as how to enable it. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>At the end of this module, you''ll be able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Understand the difference between GitHub Copilot Business versus GitHub Copilot Individuals.</li> <li>Learn about specific use cases for GitHub Copilot Business and hear how customers are enhancing their productivity.</li> <li>Review how to enable GitHub Copilot Business.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/introduction-to-github-copilot-for-business/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Implement Code Improvements Using GitHub Copilot Tools', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> This module explores using GitHub Copilot Chat to develop improvements for an existing codebase. Exercises provide practical experience implementing GitHub Copilot suggestions that improve code quality, reliability, performance, and security. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''re able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Develop prompts/questions for GitHub Copilot Chat that help you to improve the code in your existing code projects.</li> <li>Implement code update suggestions from GitHub Copilot Chat that improve existing code in the areas of code quality, reliability, performance, and security.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/implement-code-improvements-using-github-copilot-tools/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Guided Project - Accelerate App Development Using GitHub Copilot Tools', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> This module explores using GitHub Copilot to accelerate development of an end-to-end project. GitHub Copilot is used to explain unfamiliar code, generate project documentation, develop a new app feature, develop unit tests, and implement improvements. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''re able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Explain an unfamiliar codebase using GitHub Copilot tools.</li> <li>Generate README project documentation using GitHub Copilot tools.</li> <li>Develop a new application feature using GitHub Copilot tools.</li> <li>Create unit tests using GitHub Copilot tools.</li> <li>Implement code quality, reliability, performance, and security improvements using GitHub Copilot tools.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/guided-project-accelerate-app-development-using-github-copilot-tools/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Generate Documentation Using GitHub Copilot Tools', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> This module explores the generation of code explanations, project documentation, and inline code comment documentation using the GitHub Copilot Chat extension for Visual Studio Code. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''ll be able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Generate explanations of code blocks, code files, and entire code workspaces using the GitHub Copilot Chat extension for Visual Studio Code.</li> <li>Generate code project documentation using the GitHub Copilot Chat extension for Visual Studio Code.</li> <li>Generate inline code documentation using the GitHub Copilot Chat extension for Visual Studio Code.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/generate-documentation-using-github-copilot-tools/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Develop Code Features Using GitHub Copilot Tools', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> This module explores using GitHub Copilot and GitHub Copilot Chat suggestions to create new code. Autocompletion and code update suggestions are generated, managed, and implemented using the GitHub Copilot extensions for Visual Studio Code. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <p>By the end of this module, you''re able to:</p> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Generate autocompletion suggestions based on code and code comments using the GitHub Copilot extension for Visual Studio Code.</li> <li>Manage autocompletion suggestions by accepting, partially accepting, and dismissing suggestions.</li> <li>Create chat prompts/questions that communicate your intent by using a combination of chat participants, slash commands, chat variables, and natural language text.</li> <li>Create new code using the Chat View, Inline Chat, Quick Chat, and Smart Actions features provided by the GitHub Copilot Chat extension for Visual Studio Code.</li> <li>Manage code update suggestions by accepting, partially accepting, editing, and discarding the suggestions generated by GitHub Copilot Chat.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/develop-code-features-using-github-copilot-tools/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Challenge Project - Build a Minigame with GitHub Copilot and Python', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> Demonstrate your ability to analyze, create, and use different methods to develop a console minigame in Python with GitHub Codespaces and GitHub Copilot. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Experience GitHub Codespaces as a development environment.</li> <li>Develop input and output routines in a Python console application.</li> <li>Use GitHub Copilot as an assistant.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/challenge-project-create-mini-game-with-copilot/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Challenge Project - Build a Minigame with GitHub Copilot and .NET', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> Demonstrate your ability to analyze, create, and use different methods to develop a console minigame in .NET with GitHub Codespaces and GitHub Copilot. </p> <!-- Learning Objectives --> <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Experience GitHub Codespaces as a development environment.</li> <li>Develop input and output routines in a .NET console application.</li> <li>Use GitHub Copilot as an assistant.</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://learn.microsoft.com/en-us/training/modules/challenge-project-create-mini-game-with-copilot-dotnet/" target="_blank" class="btn btn-primary"> Go to Learning Module </a> </div>', SYSDATETIME(), 10);
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'Challenge GitHub Copilot with SQL', N'<!-- Summary -->     <p style="font-size: 1.1rem; color: #333;">         Demonstrate your ability to apply advanced GitHub Copilot features to interact with an application that uses complex SQL queries.     </p>      <!-- Learning Objectives -->     <h5 class="mt-4" style="font-weight: 600;">Learning objectives</h5>     <ul style="font-size: 1rem; line-height: 1.6;">         <li>Demonstrate an understanding of how to use GitHub Copilot with existing application and SQL code.</li>         <li>Use advanced GitHub Copilot interaction techniques to deal with complex problems regarding SQL queries.</li>         <li>Iterate, validate, and refine answers to get better and more accurate suggestions.</li>         <li>Gain an understanding of GitHub Copilot prompting techniques and how prompts impact the output.</li>     </ul>      <!-- Prerequisites -->     <h5 class="mt-4" style="font-weight: 600;">Prerequisites</h5>     <ul style="font-size: 1rem; line-height: 1.6;">         <li>A basic understanding of SQL and relational databases.</li>         <li>Familiarity with GitHub and GitHub Codespaces.</li>     </ul>      <!-- CTA Button -->     <div class="mt-4">         <a href="https://learn.microsoft.com/en-us/training/modules/challenge-github-copilot-sql/" target="_blank" class="btn btn-primary">             Go to Learning Module         </a>     </div>', SYSDATETIME(), 10);

<!-- GitHub Copilot Certification -->
INSERT INTO [dbo].[Challenges] (Title, Content, PostedDate, ActivityId) VALUES (N'GitHub Copilot Certification', N'<!-- Summary --> <p style="font-size: 1.1rem; color: #333;"> This certification validates your expertise with GitHub Copilot. </p> <!-- Skills Measured --> <h5 class="mt-4" style="font-weight: 600;">Skills measured</h5> <ul style="font-size: 1rem; line-height: 1.6;"> <li>Responsible AI</li> <li>GitHub Copilot plans and features</li> <li>How GitHub Copilot works and handles data</li> <li>Prompt Crafting and Prompt Engineering</li> <li>Developer use cases for AI</li> <li>Testing with GitHub Copilot</li> <li>Privacy fundamentals and content exclusions</li> </ul> <!-- CTA Button --> <div class="mt-4"> <a href="https://examregistration.github.com/certification/COPILOT" target="_blank" class="btn btn-primary"> Go to Certification Page </a> </div>', SYSDATETIME(), 11);
